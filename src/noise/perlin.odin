package noise

import "core:fmt"
import "core:math"
_ :: math
_ :: fmt

// odinfmt:disable
@(rodata)
PERLIN_PERMUTATIONS := []i32 {
	151, 160, 137,  91,  90,  15, 131,  13, 201,  95,  96,  53, 194, 233,   7, 225,
	140,  36, 103,  30,  69, 142,   8,  99,  37, 240,  21,  10,  23, 190,   6, 148,
	247, 120, 234,  75,   0,  26, 197,  62,  94, 252, 219, 203, 117,  35,  11,  32,
	 57, 177,  33,  88, 237, 149,  56,  87, 174,  20, 125, 136, 171, 168,  68, 175,
	 74, 165,  71, 134, 139,  48,  27, 166,  77, 146, 158, 231,  83, 111, 229, 122,
	 60, 211, 133, 230, 220, 105,  92,  41,  55,  46, 245,  40, 244, 102, 143,  54,
	 65,  25,  63, 161,   1, 216,  80,  73, 209,  76, 132, 187, 208,  89,  18, 169,
	200, 196, 135, 130, 116, 188, 159,  86, 164, 100, 109, 198, 173, 186,   3,  64,
	 52, 217, 226, 250, 124, 123,   5, 202,  38, 147, 118, 126, 255,  82,  85, 212,
	207, 206,  59, 227,  47,  16,  58,  17, 182, 189,  28,  42, 223, 183, 170, 213,
	119, 248, 152,   2,  44, 154, 163,  70, 221, 153, 101, 155, 167,  43, 172,   9,
	129,  22,  39, 253,  19,  98, 108, 110,  79, 113, 224, 232, 178, 185, 112, 104,
	218, 246,  97, 228, 251,  34, 242, 193, 238, 210, 144,  12, 191, 179, 162, 241,
	 81,  51, 145, 235, 249,  14, 239, 107,  49, 192, 214,  31, 181, 199, 106, 157,
	184,  84, 204, 176, 115, 121,  50,  45, 127,   4, 150, 254, 138, 236, 205,  93,
	222, 114,  67,  29,  24,  72, 243, 141, 128, 195,  78,  66, 215,  61, 156, 180,

	151, 160, 137,  91,  90,  15, 131,  13, 201,  95,  96,  53, 194, 233,   7, 225,
	140,  36, 103,  30,  69, 142,   8,  99,  37, 240,  21,  10,  23, 190,   6, 148,
	247, 120, 234,  75,   0,  26, 197,  62,  94, 252, 219, 203, 117,  35,  11,  32,
	 57, 177,  33,  88, 237, 149,  56,  87, 174,  20, 125, 136, 171, 168,  68, 175,
	 74, 165,  71, 134, 139,  48,  27, 166,  77, 146, 158, 231,  83, 111, 229, 122,
	 60, 211, 133, 230, 220, 105,  92,  41,  55,  46, 245,  40, 244, 102, 143,  54,
	 65,  25,  63, 161,   1, 216,  80,  73, 209,  76, 132, 187, 208,  89,  18, 169,
	200, 196, 135, 130, 116, 188, 159,  86, 164, 100, 109, 198, 173, 186,   3,  64,
	 52, 217, 226, 250, 124, 123,   5, 202,  38, 147, 118, 126, 255,  82,  85, 212,
	207, 206,  59, 227,  47,  16,  58,  17, 182, 189,  28,  42, 223, 183, 170, 213,
	119, 248, 152,   2,  44, 154, 163,  70, 221, 153, 101, 155, 167,  43, 172,   9,
	129,  22,  39, 253,  19,  98, 108, 110,  79, 113, 224, 232, 178, 185, 112, 104,
	218, 246,  97, 228, 251,  34, 242, 193, 238, 210, 144,  12, 191, 179, 162, 241,
	 81,  51, 145, 235, 249,  14, 239, 107,  49, 192, 214,  31, 181, 199, 106, 157,
	184,  84, 204, 176, 115, 121,  50,  45, 127,   4, 150, 254, 138, 236, 205,  93,
	222, 114,  67,  29,  24,  72, 243, 141, 128, 195,  78,  66, 215,  61, 156, 180,
}
// odinfmt:enable

fade :: proc(x: f32) -> f32 {
	return x * x * x * (x * (x * 6 - 15) + 10)
}

grad2d :: proc(hash: i32, x, y: f32) -> f32 {
// odinfmt:disable
	switch hash & 7 {
	case 0: return x + y
	case 1: return x
	case 2: return x - y
	case 3: return -y
	case 4: return -x - y
	case 5: return -x
	case 6: return -x + y
	case 7: return y
	case:   return 0
	}
// odinfmt:enable
}

// perlin2d :: proc(x, y: f32) -> f32 {
// 	P := PERLIN_PERMUTATIONS

// 	xi, yi := cast(i32)math.floor(x), cast(i32)math.floor(y)

// 	x0, y0 := x - f32(xi), y - f32(yi)
// 	x1, y1 := x0 - 1, y0 - 1

// 	xi, yi = xi & 0xff, yi & 0xff

// 	u, v := fade(x0), fade(y0)

// 	fmt.eprintln("\t", x, y, xi, yi, x0, y0, x1, x1)
// 	_ :: fmt

// 	h00 := P[P[xi + 0] + yi + 0]
// 	h01 := P[P[xi + 0] + yi + 1]
// 	h10 := P[P[xi + 1] + yi + 0]
// 	h11 := P[P[xi + 1] + yi + 1]

// 	x, y := x, y
// 	x = math.lerp(grad2d(h00, x0, y0), grad2d(h10, x1, y0), u)
// 	y = math.lerp(grad2d(h01, x0, y1), grad2d(h11, x1, y1), u)
// 	return math.lerp(x, y, v)
// }

perlin2d :: proc(x, y: $T) -> T {
	p := PERLIN_PERMUTATIONS

	// Top-left coordinates of the unit-square.
	xi0 := cast(i32)math.floor(x)
	yi0 := cast(i32)math.floor(y)

	// Input location in the unit-square.
	xf0 := x - T(xi0)
	yf0 := y - T(yi0)
	xf1 := xf0 - T(1.0)
	yf1 := yf0 - T(1.0)

	// Wrap to range 0-255.
	xi := xi0 & 0xFF
	yi := yi0 & 0xFF

	// Apply the fade function to the location.
	u := fade(xf0)
	v := fade(yf0)

	// Generate hash values for each point of the unit-square.
	h00 := p[p[xi + 0] + yi + 0]
	h01 := p[p[xi + 0] + yi + 1]
	h10 := p[p[xi + 1] + yi + 0]
	h11 := p[p[xi + 1] + yi + 1]

	// Linearly interpolate between dot products of each gradient with its distance to the input location.
	x1 := math.lerp(grad2d(h00, xf0, yf0), grad2d(h10, xf1, yf0), u)
	x2 := math.lerp(grad2d(h01, xf0, yf1), grad2d(h11, xf1, yf1), u)
	return math.lerp(x1, x2, v)
}
